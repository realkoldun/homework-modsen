Callback -- передача ф-ции в фу-цию и выполнение ее после какого-то действия (после выполнения асинхронных операций)
Callback Hell --разрастание ф-ций с большим кол-вом callback`ов (было раньше)

Promise -- объект представляющий результат будущей операции
    1. Pending -- ожидание преступления к действию
    2. Fulfilled -- успешное завершение
    3. Rejected -- не успешное завершение
    4. Settled -- завершение операции (результат не известен)

new Promise( (resolve, rejected) => {
    if(///) resolve(///);
    else rejected(///);
} ) -- синхронная ф-ция. Принимает ф-цию executor и содержит 2 аргумента

обработка Promise:
    .then() {}
    .catch() {}
    .finally() {}

Микрозадачи -- задачи с более высоким приоритетом,
    выполняющиеся сразу после завершения текущего кода в Call Back, но до любых макрозадач
    Хранятся в Microtask Queue
        Обработчики и Promise
        Вызова
        Обработчики изменений
Макрозадачи -- задачи с более низким приоритетом (после микрозадач)
    Хранятся в Task Queue
        Таймеры
        Обработчики событий
        Асинхронные операции

пример //1.js

Promise API:
    Promise.all( [promise1, promise2, promise3] ) -- принимает итерируемый объект, выполняемый после выполнения всех promise переданных в него;
        Если хоть 1 не выполнился -- он не выполняется
        Выполнение [promise1, promise2, promise3] строго по порядку
    Promise.race( [promise1, promise2] ) -- возвращает результат первого завершенного promise
    Promise.allSettled( [promise1, promise2, promise3] ) -- если у одного ошибка, выполнение остальных продолжается.
        Результат -- результат выполнения всех promise в виде объекта {status: //, value/reason: //}

