1)    Вложенная функция - функция внутри другой функции
    Лексическое окружение -- обл видимости, где созд ф-ция
    Environment Record -- объект, где хранятся как свойства все локальные переменные окружения
    Замыкание --
    + замыкание:
        1. защита переменных от внешнего доступа
        2. Сохранение значения переменной после выполнения функции
        3. Создание частично применненых функции
    Частично примененная функция -- каррирование(передача не всех аргументов)
    ///1.js

2)    Каррирование -- преобраз ф-ции от нескольких фргументов в набор влож ф-ций
            function(1)(2)(3):

                function(1) {
                    function_1(2) {
                        function_3(3) {
                            return 1+2+3;
                        }
                    }
                }
    //2.js

3)    Хостинг (Hoisting) всплытие переменной вверх(объявление вплывает наверх области видимости); var и const попадают в мертвую зону;
    function всплывают, стрелочные и выражение не всплывают
    Named function expression -- ф-ция определена как выражение с именем(можно в ней вызывать ее же [для рекурсий]):
        const myFunc = function namedFunc(a) => {
            //тут можно вызывать namedFunc(a - 1);
        }
    //4.js

4)    Стрелочная ф-ция: () => {};
    Особенности стрелочной ф-ции:
        1. Упрощенный синтаксис
        2. this ссылается на внешнюю область (внешненеее лексическое окружение)
        3. Отсутствие arguments
        4. Нельзя использовать как контструктор
        //5.js

5)   Ф-ции высшего порядка -- ф-ции принимающие или возвращающие другие ф-ции
   IIFE(Immidetly involved function expression ф-ции):
        1. определяется и вызываются
        2. создание локального пространсва чтобы не засорять глобальное пространство
        (function () {
            let message = "a";
            console.log(message);
        })(params);
        В них можно предавать параметры params и они передаются в область видимости (function);
   //6.js

6)   Ф-ция генератор -- итеративная ф-ция
    Без генераторов:
    1. В обычных функциях все выполняется сразу

        function* generator() {
            yield 1; -- останавливает выполнение и возвращает 1
            yield 2;
            yield 3;
            yield 4;
            return 5; -- конец выполнения
        }
        gen = generator(); -- создается объект итератор
        gen.next().value -- 1 next() возвращает {value: 1, done: false}
        gen.next().value -- 2
        gen.next().value -- 3
        gen.next().value -- 4
        gen.next().value -- 5, все программа завершается
        gen.next().value -- undefined, тк next() вернет {value: undefined, done: true}
        Зачем они нужныЖ
            1. Обработка больших данных по частям
            2. Ассинхронное программирование
            3. Еще для чего-то


7)    Ф-ции обратного вызова -- передаваемая в ф-цию ф-ция
        Зачем:
            1. Выполнение после определенных условий
            2. Ассинхронность