DOM (Document Object Module) -- представление данной страницы в браузере в виде объекта
document в js
состоит из:
    Документы, элементы, аттрибуты, текстовые узлы
Действия с DOM:

BOM (Browser Object Module) -- интрефейс для взаимодействия с браузером
Объекты DOM:
    window -- доступ ко всему контенту
    document -- объект связанный с DOM
    navigator -- инфа о браузере и устройстве
    location -- представляет url и методы его представления
    history -- управление историей браузера back() forward()
    screen -- инфа о экране

const element = document.getElementById(//id); -- получить элемент по его id
element.setAttribute('attribute', value); -- изменить св-во
element.remove(); -- удалить элемент со страницы

const newDIv = document.createElement('type')
document.body.appendChild(newDiv); -- добавление элемента на страницу

CSSOM (CSS Object Module) -- интерфейс для взаимодействия со стилями
element.style.стиль = value

Событие -- действия, происходящие при взаимодействии пользователя с элементом

загрузка страницы (load, DOMContentLoaded)
    DOMContentLoaded -- событие, вызов при загрузке страницы не включая изображения, стили
    window.onload -- вызов при полной загрузке включая все внешние файлы

beforeunload -- событие, вызов перед закрытия сайта
unload --- событие, вызов при закрытии сайта

Всплытие погружения -- перехват событий обработчиком событий
    1. Событие вызвано
    2. Событие погружается DOM -> body -> html -> теги -> тег где вызвано событие
    3. Обработка события тег -> теги -> html -> body -> DOM
    Почему так: при вызове у всех слоев спрашивают, они ли вызвали событие
    event.stopPropagation() -- остановка всплытия
    event.stopImmediatePropagation() --
    event.preventDefault() -- запрет на вызов стандартного действия у event
    Стандартно -- всплытие
    addEventListen(event, function, true) -- погружение

Делегирование событий -- назначение обработчика на родительский элемент,
обрабатывающий события всех дочерних элементов
    event.currentTarget -- родитель
    event.target -- дочерние и родительские элементы

Критические этапы рендера
    1. Загрузка ресурса
    2. Build DOM (убрать ненужные теги) + Run JS (либо в конец либо async)
    3. Build CSSOM (убрать ненужные классы) + Run JS (либо в конец либо async)
    4. Render Tree -- соединение html js css в объектную модель
    5. Layout -- позиционирование элементов
        <meta type="viewport"> -- использование макс размера экрана для перестроения при изменении экранов
    6. Paint -- отрисовка элементов

